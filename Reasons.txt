Password Mechanism:
    Although, I would prefer 2FA authentication mechanism for money related apps, for sake of simplicity currently i am employing Python Framework which add salt to the password and hashes it
    and then store it to db. Good read: https://passlib.readthedocs.io/en/stable/faq.html

Authentication mechanism:
    I am going to use Token based system since most of the api call needs to be authenticated. When a user is going to login, password is transmitted over SSL(client side hashing not employed) and then
    salted and hashed in server. In return of this api call, a token is given to the user. For subsequent request by the user, till logout, this token needs to be present in all the api calls for
    them to succeed.

    I learned that JWT is  much better for authentication here.

Hierarchy of user-roles:
    I am assuming following hierarchy:
    1. Admins can see all agents and other admins if any.
    2. Agents can only see customers under them, they can see other agents and they can also see all admins.
    3. Customers cannot see other users.

Database Choice:
    MongoDB, Since i want to have better mastery over NoSQL db + it scales really well. Besides it has full ACID support from V4 if replicaset is employed.

Loans:
    After analysis I found out that there are varieties of loan types available in the market. I am picking a particular type (unsecured loan) assuming that
    i can create a basic architecture which can be adapted for other loan types also.

Customer_Loan_Id:
    Each loan request needs to be assigned a unique id. After much analysis, I realized that the default MongoID wouldn't be a good candidate for this task as there is a tiny chance that a duplicate key
    is generated and the insertion fails due to unique constraint. It is needed to develop own sequential and unique id for this.